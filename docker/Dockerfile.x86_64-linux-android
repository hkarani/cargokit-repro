FROM ubuntu:24.04 AS builder

# Install dependencies for Rust development
RUN apt-get update && apt-get install -y \
  build-essential \
  pkg-config \
  libssl-dev \
  jq \
  curl \
  unzip \
  git \
  wget \
  clang \
  cmake \
  openjdk-21-jdk \
  && apt-get clean

# Install Rust compiler (using rustup)
RUN useradd -ms /bin/bash runner && mkdir -p /home/runner/.cargo /home/runner/.rustup home/runner/work && chown -R runner:runner /home/runner

USER runner
ENV HOME=/home/runner \
    CARGO_HOME=/home/runner/.cargo \
    RUSTUP_HOME=/home/runner/.rustup \
    PATH=/home/runner/.cargo/bin:$PATH

# Install Rust 1.88.0
RUN curl -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.86.0

ENV CARGO_HOME="/home/runner/.cargo"
ENV RUSTUP_HOME="/home/runner/.rustup"
ENV PATH="/home/runner/.cargo/bin:$PATH"

USER root
# Create SDK folder and set ownership for existing runner user
RUN mkdir -p /usr/local/lib/android/sdk && \
    mkdir -p /opt/ && \
    chown -R runner:runner /usr/local/lib/android/sdk && \
    chown -R runner:runner /opt/


# Switch to runner
USER runner
WORKDIR /usr/local/lib/android/sdk

# Download and install command-line tools
RUN curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip \
  && unzip cmdline-tools.zip -d cmdline-tools \
  && mv cmdline-tools/cmdline-tools cmdline-tools/latest \
  && rm cmdline-tools.zip

WORKDIR /opt
RUN git clone https://github.com/flutter/flutter.git -b stable /opt/flutter
ENV PATH="/opt/flutter/bin:/opt/flutter/bin/cache/dart-sdk/bin:$PATH"
RUN flutter doctor

# Set environment variables for runner
ENV ANDROID_HOME="/usr/local/lib/android/sdk"
ENV PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"

# Accept licenses and install NDK
RUN yes | sdkmanager --licenses
RUN sdkmanager --install "ndk;26.3.11579264"

# Set NDK env vars
ENV ANDROID_NDK_HOME="$ANDROID_HOME/ndk/26.3.11579264"
ENV PATH="$ANDROID_NDK_HOME:$PATH"


# Set up NDK environment variables
ENV ANDROID_NDK_HOME="$ANDROID_HOME/ndk/26.3.11579264"
ENV PATH="$ANDROID_NDK_HOME:$PATH"

# Add NDK LLVM toolchain binaries to PATH
ENV PATH="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"

# Tell Cargo to use the NDK clang for aarch64-linux-android
# ENV CC_aarch64_linux_android="aarch64-linux-android23-clang"
# ENV CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="aarch64-linux-android23-clang"

ENV CC_aarch64-linux-android="/usr/local/lib/android/sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" \
    CFLAGS_aarch64-linux-android="--target=aarch64-linux-android23" \
    AR_aarch64-linux-android="/usr/local/lib/android/sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

WORKDIR /home/runner/work/bdk-flutter/
# Copy the folder from root
COPY --chown=runner:runner src/ .
# Change directory
RUN chown -R runner:runner /home/runner/work/bdk-flutter
WORKDIR /home/runner/work/bdk-flutter/bdk-flutter/cargokit/build_tool/bin

RUN mkdir -p ~/lib/linux

RUN mkdir -p  ~/release/linux

RUN CARGOKIT_ROOT_PROJECT_DIR="/home/runner/work/bdk-flutter/bdk-flutter" \
CARGOKIT_TARGET_PLATFORMS="android-x64" \
CARGOKIT_CONFIGURATION="release" \
CARGOKIT_TARGET_TEMP_DIR="/tmp/precompiled_xY12Ab" \
CARGOKIT_MANIFEST_DIR="/home/runner/work/bdk-flutter/bdk-flutter/rust" \
CARGOKIT_OUTPUT_DIR="/home/runner/work/bdk-flutter/bdk-flutter/rust/target" \
CARGOKIT_MIN_SDK_VERSION="23" \
CARGOKIT_NDK_VERSION="26.3.11579264" \
CARGOKIT_SDK_DIR="/usr/local/lib/android/sdk" \
CARGOKIT_JAVA_HOME="/usr/lib/jvm/java-21-openjdk-amd64" \
dart run build_tool build-gradle

# RUN cargo clean
# RUN rustup target add aarch64-linux-android
# RUN cargo build --release --target aarch64-linux-android

RUN mkdir -p ~/release/output_binaries
ENV SOURCE_DIR="/tmp/precompiled_xY12Ab"
ENV DEST_DIR="/home/runner/release/output_binaries"

# RUN find "$SOURCE_DIR" -maxdepth 1 -type f -name "*.so" -exec cp {} "$DEST_DIR" \; -quit
RUN cp -r "$SOURCE_DIR/" "$DEST_DIR/"


FROM ubuntu:22.04 AS final
RUN mkdir -p ~/release/output_binaries
COPY --from=builder /home/runner/release/output_binaries/ /root/release/output_binaries


# Run a tiny program to make the build runnable
CMD ["sleep", "infinity"]