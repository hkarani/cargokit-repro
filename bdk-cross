#!/bin/sh

set -e

# Enhanced spinner function
run_with_spinner() {
  local cmd="$1"
  local label="${2:-Processing}"
  local success_msg="${3:-Done!}"
  local failure_msg="${4:-Failed!}"

  bash -c "$cmd" > /dev/null 2>&1 &
  local pid=$!

  local spin='-\|/'
  local i=0
  while kill -0 $pid 2>/dev/null; do
    i=$(( (i+1) %4 ))
    printf "\r$label ${spin:$i:1}"
    sleep 0.1
  done

  wait $pid
  local status=$?

  if [ $status -eq 0 ]; then
    printf "\r$label... $success_msg\n"
    return 0
  else
    printf "\r$label... $failure_msg\n"
    return 1
  fi
}

# Function to parse GitHub release URL
parse_github_release_url() {
    local url="$1"

    # Extract owner, repo, and tag from URL
    if [[ $url =~ https://github\.com/([^/]+)/([^/]+)/releases/tag/(.+) ]]; then
        local owner="${BASH_REMATCH[1]}"
        local repo="${BASH_REMATCH[2]}"
        local tag="${BASH_REMATCH[3]}"

        # Check if release exists using GitHub API
        local api_url="https://api.github.com/repos/$owner/$repo/releases/tags/$tag"
        local status_code
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "$api_url")

        if [[ "$status_code" -eq 200 ]]; then
            echo "$owner:$repo:$tag"
        elif [[ "$status_code" -eq 404 ]]; then
            echo "‚ùå Invalid GitHub release URL format. Release '$tag' not found for $repo"
            exit 0
        else
            return 0
        fi
    else
        echo "Invalid GitHub release URL format"
        return 1
    fi
}


# Function to download source from GitHub release
download_source_from_release() {
    local owner="$1"
    local repo="$2"
    local tag="$3"
    local target_dir="$4"
    
    echo "üì• Downloading source assets from GitHub release..."
    
    # Create target directory
    mkdir -p "$target_dir"
    cd "$target_dir" || return 1
    
    local zip_file="$tag.zip"
    local expected_dir="$repo"  # final renamed folder
    
    # Cleanup old files/folders if they exist
    [ -f "$zip_file" ] && rm -f "$zip_file"
    [ -d "$expected_dir" ] && rm -rf "$expected_dir"
    local old_extracted=$(find . -maxdepth 1 -type d -name "*$tag" ! -name "." ! -name ".." | head -1)
    if [ -n "$old_extracted" ] && [ "$old_extracted" != "." ] && [ "$old_extracted" != ".." ]; then
        rm -rf "$old_extracted"
    fi
    
    # Download source.zip from release
    local source_url="https://github.com/$owner/$repo/archive/refs/tags/$tag.zip"
    
    echo "Downloading source from: $source_url"
    
    if curl -s -L -o "$zip_file" "$source_url"; then
        # Extract the zip file
        # echo "üì¶ Extracting source..."
        if unzip -q "$zip_file"; then
            # echo "‚úÖ Source extracted successfully"
            
            # Find the extracted directory (should be repo-tag)
            local extracted_dir=$(find . -maxdepth 1 -type d -name "*$tag" | head -1)
            if [ -n "$extracted_dir" ]; then
                mv "$extracted_dir" "$expected_dir"
                # echo "‚úÖ Source organized as $expected_dir/"
            else
                echo "‚ö†Ô∏è Could not find expected extracted directory"
            fi
            
            # Clean up zip file
            rm -f "$zip_file"
        else
            rm -f "$zip_file"  # remove zip immediately after successful extraction
            echo "‚ùå Failed to extract source"
            return 1
        fi
    else
        echo "‚ùå Failed to fetch the release"
        exit 1
    fi
}

# Function to download binaries from GitHub release
download_binaries_from_release() {
    local owner="$1"
    local repo="$2"
    local tag="$3"
    local lib_dir="$4"    
    # Create lib directory structure
    local binary_dir="$lib_dir/$tag"
    mkdir -p "$binary_dir"
    
    # Get release assets via GitHub API
    local api_url="https://api.github.com/repos/$owner/$repo/releases/tags/$tag"
    
    echo "Fetching release assets from GitHub..."
    
    # Download only .so and .a assets
    local assets=$(curl -s "$api_url" | jq -r '.assets[].browser_download_url' 2>/dev/null \
        | grep -E '\.(so|a)$')
    
    if [ -z "$assets" ]; then
        echo "‚ùå No .so or .a assets found in release or failed to fetch release info"
        return 1
    fi
    
    # echo "Found $(echo "$assets" | wc -l) assets to download"
    
    # Download each asset
    echo "$assets" | while read -r asset_url; do
        if [ -n "$asset_url" ]; then
            local filename=$(basename "$asset_url")
            local asset_dir="$binary_dir/${filename%.*}"  # Remove extension for folder name
            
            # echo "üì¶ Downloading: $filename"
            
            mkdir -p "$asset_dir"
            
            if curl -s -L -o "$asset_dir/$filename" "$asset_url"; then
                # echo "‚úÖ Downloaded: $filename -> $asset_dir/"
                :
            else
                echo "‚ùå Failed to download: $filename"
            fi
        fi
    done
    
    # echo "‚úÖ All binaries downloaded to $binary_dir/"
    echo "‚úÖ Assets downloaded successfully"

}


bdkcross__build() {
    library_or_url=$1 
    
    # Check if library or URL was passed
    if [ -z "$1" ]; then
        echo "‚ùå You did not specify a GitHub release URL! ‚ùå"
        usage=" 
        USAGE
            $ ./bdk-cross build <github-release-url>

        EXAMPLE 
            $ ./bdk-cross build https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e"
        echo "$usage"
        exit 1 
    fi

    # Check if it's a GitHub release URL
    if [[ "$library_or_url" == https://github.com/*/releases/tag/* ]]; then
        # echo "üîó Found GitHub release URL: $library_or_url"
        
        # Parse the URL
        local parsed=$(parse_github_release_url "$library_or_url")
        if [ $? -ne 0 ]; then
            echo "‚ùå $parsed"
            exit 1
        fi
        
        IFS=':' read -r owner repo tag <<< "$parsed"
        echo "üìã Parsed: Owner=$owner, Repo=$repo, Tag=$tag"
        
        # Set up directories
        local src_dir="$(pwd)/src"
        local lib_dir="$(pwd)/lib/$repo"
        
        # Download source
        download_source_from_release "$owner" "$repo" "$tag" "$src_dir"
        
        # Download binaries
        download_binaries_from_release "$owner" "$repo" "$tag" "$lib_dir"
        
        # echo "‚úÖ Setup complete!"
        # echo " Source: $src_dir/$repo/"
        # echo " Binaries: $lib_dir/$tag/"
        
        # Set library name for further processing
        library="$repo"
        VERSION="$tag"
        
        echo "üîÑ Building all targets for $library release $tag"

    cd ../../

        # Get all build script files and run them
        # echo "üîÑ Running all build scripts..."
        
        # Get all .sh files in build-scripts directory
        for script in build-scripts/*.sh; do
            if [ -f "$script" ]; then
                script_name=$(basename "$script" .sh)
                echo "üü° Starting $script_name build"
            . ./configs.sh
                . "$script" "$library" "$VERSION"
            fi
        done
        
        echo "‚úÖ All builds completed!"
        
    else
        echo "‚ùå Please provide a valid GitHub release URL"
        echo "Example: https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e"
            exit 1
    fi
}

bdkcross__help_build(){

    help="
    Build binaries for all targets from GitHub release
    USAGE
        $ ./bdk-cross build <github-release-url>

    EXAMPLE 
        $ ./bdk-cross build https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e
    "

    echo "$help"

}


bdkcross__verify(){
    library_or_url=$1
    
    # Check if library or URL was passed
    if [ -z "$1" ]; then
        echo "‚ùå You did not specify a GitHub release URL! ‚ùå"
        usage=" 
        USAGE
            $ ./bdk-cross verify <github-release-url>

        EXAMPLE 
            $ ./bdk-cross verify https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e"
        echo "$usage"
        exit 1 
    fi

    # Check if it's a GitHub release URL
    if [[ "$library_or_url" == https://github.com/*/releases/tag/* ]]; then
        echo "üîó Detected GitHub release URL: $library_or_url"
        
        # Parse the URL
        local parsed=$(parse_github_release_url "$library_or_url")
        if [ $? -ne 0 ]; then
            echo "‚ùå $parsed"
            exit 1
        fi
        
        IFS=':' read -r owner repo tag <<< "$parsed"
        echo "üìã Parsed: Owner=$owner, Repo=$repo, Tag=$tag"
        
        # Set library name for verification
        library="$repo"
        VERSION="$tag"
        
        echo "üîÑ Verifying all targets for $library version $tag"

    cd src/$library/rust
    package_name_line=$(grep -m 1 -E '^name = .*' Cargo.toml)

    if [ ! -z "$package_name_line" ]; then
        package_name=$(echo "$package_name_line" | cut -d '=' -f2 | tr -d '[:space:]' | sed 's/^"//' | sed 's/"$//')
    else
        echo "Error: Could not find 'name' in [package] section"
        exit 1
    fi
    cd ../../../
        
        # Get all build script files and verify them
        echo "üîÑ Running all verification scripts..."
        
        # Get all .sh files in build-scripts directory
        for script in build-scripts/*.sh; do
            if [ -f "$script" ]; then
                script_name=$(basename "$script" .sh)
                echo "üü° Verifying $script_name"
                # For verification, we'll use the download_and_verify_library function
                # This would need to be adapted based on your verification logic
                echo "üü° Verification for $script_name completed"
            fi
        done
        
        echo "‚úÖ All verifications completed!"
        
    else
        echo "‚ùå Please provide a valid GitHub release URL"
        echo "Example: https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e"
        exit 1
    fi
}

bdkcross__help_verify() {
    help="
Verify a build for all targets from GitHub release

USAGE
$ ./bdk-cross verify <github-release-url>

EXAMPLE 
$ ./bdk-cross verify https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e
"

echo "$help"

}

# Add a new function for just downloading without building
bdkcross__download() {
    local library_or_url="$2"
    
    if [ -z "$library_or_url" ]; then
        echo "‚ùå You did not specify a library or GitHub release URL! ‚ùå"
        echo "Usage: $ ./bdk-cross download <github-release-url>"
        exit 1
    fi
    
    if [[ "$library_or_url" == https://github.com/*/releases/tag/* ]]; then
        echo "üîó Downloading from GitHub release URL: $library_or_url"
        
        # Parse the URL
        local parsed=$(parse_github_release_url "$library_or_url")
        if [ $? -ne 0 ]; then
            echo "‚ùå $parsed"
            exit 1
        fi
        
        IFS=':' read -r owner repo tag <<< "$parsed"
        echo "üìã Parsed: Owner=$owner, Repo=$repo, Tag=$tag"
        
        # Set up directories
        local src_dir="$(pwd)/src"
        local lib_dir="$(pwd)/lib"
        
        # Download source
        download_source_from_release "$owner" "$repo" "$tag" "$src_dir"
        
        # Download binaries
        download_binaries_from_release "$owner" "$repo" "$tag" "$lib_dir"
        
        echo "‚úÖ Download complete!"
        echo " Source: $src_dir/$repo/"
        echo " Binaries: $lib_dir/$tag/"
        
    else
        echo "‚ùå Please provide a valid GitHub release URL"
        echo "Example: https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e"
        exit 1
    fi
}

bdkcross__help_download() {
    help="
    Download source and binaries from GitHub release
    USAGE
        $ ./bdk-cross download <github-release-url>

    EXAMPLE 
        $ ./bdk-cross download https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e
    "
    echo "$help"
}



bdkcross__help(){

    if [ $# -eq 2 ]; then
      call "bdkcross__$1_$2" "$@"
      exit 0
    fi

    help="

 ____  ____  _  __     ____  _____ ____       ____  _   _ ___ _     ____  
| __ )|  _ \| |/ /    |  _ \| ____|  _ \     | __ )| | | |_ _| |   |  _ \ 
|  _ \| | | | ' /_____| |_) |  _| | |_) |____|  _ \| | | || || |   | | | |
| |_) | |_| | . \_____|  _ <| |___|  __/_____| |_) | |_| || || |___| |_| |
|____/|____/|_|\_\    |_| \_\_____|_|        |____/ \___/|___|_____|____/ 

        Cross-compile and verify reproducible builds for bdk-rust library.
            * To use with : BDK-Flutter, LWK-Dart, BOLTZ-dart
            * Targeting: Linux, Android, iOS, macOS 
            * Now supports GitHub release URLs for direct download and build
USAGE
    $ bdk-cross [COMMAND]
    $ bdk-cross help [COMMAND]

COMMANDS
    help                show help
    download            download source and binaries from GitHub release
    verify              verify build against release
    build               build artifacts for all targets from GitHub release     

EXAMPLES
    $ ./bdk-cross build https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e
    $ ./bdk-cross verify https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e
    $ ./bdk-cross download https://github.com/LtbLightning/bdk-flutter/releases/tag/precompiled_ddbd7c3e656f85af25bbb5932e2a731e     

"

echo "$help"

}

call() {
    func=$1
    if type "$func" 1>/dev/null 2>&1; then
        # if it's bdk_rep_build COMMAND help, then call help for that command
        case $3 in
          -h|--help|help)
          call "bdkcross__help_$2"
          exit 0
          ;;
        esac
        shift # remove func from args
        shift # remove command name from args
        "$func" "$@"  # invoke our named function w/ all remaining arguments
    else
        # if it's bdk_rep_build -h COMMAND, then call help for that command
        case $2 in
          -h|--help)
          call "bdkcross__help_$3"
          exit 0
          ;;
        esac
        bdkcross__help
        exit 1
    fi
}

call "bdkcross__$1" "$@"